/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Cryptography;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.math.BigInteger;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author boeingtuan
 */
public class CryptoFrame extends javax.swing.JFrame {

    private JFileChooser fileChooser;
    public String filepath = "";

    /**
     * Creates new form CryptoFrame
     */
    public CryptoFrame() {
        initComponents();
        fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        jTextRSAq.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent de) {
                calculateRSANeeded();
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                calculateRSANeeded();
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                calculateRSANeeded();
            }

        });

        jTextRSAp.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent de) {
                calculateRSANeeded();
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                calculateRSANeeded();
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                calculateRSANeeded();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modeButtonGroup = new javax.swing.ButtonGroup();
        paddingButtonGroup = new javax.swing.ButtonGroup();
        modeBlowfishButtonGroup1 = new javax.swing.ButtonGroup();
        paddingBlowfishButtonGroup1 = new javax.swing.ButtonGroup();
        modeRSAbuttonGroup1 = new javax.swing.ButtonGroup();
        paddingRSAButtonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jRadioPKCS5 = new javax.swing.JRadioButton();
        jRadioISO10126 = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jRadioECB = new javax.swing.JRadioButton();
        jRadioCBC = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextKeyDES = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextIVDES = new javax.swing.JTextField();
        jButtonBrowseKey = new javax.swing.JButton();
        jButtonBrowseIV = new javax.swing.JButton();
        jButtonSaveIV = new javax.swing.JButton();
        jButtonSaveKey = new javax.swing.JButton();
        jButtonGenKey = new javax.swing.JButton();
        jButtonGenIV = new javax.swing.JButton();
        jTextFilePathDES = new javax.swing.JTextField();
        jButtonBrowseFile = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaFileContentDES = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jTextMD5DES = new javax.swing.JTextField();
        jButtonEncrypt = new javax.swing.JButton();
        jButtonDecrypt = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        _LoggerDES = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jRadioECBRSA = new javax.swing.JRadioButton();
        jRadioCBC2 = new javax.swing.JRadioButton();
        jPanel12 = new javax.swing.JPanel();
        jRadioPKCS1RSA = new javax.swing.JRadioButton();
        jRadioLZero3 = new javax.swing.JRadioButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jTextRSAq = new javax.swing.JTextField();
        jButtonGenPrimeQ = new javax.swing.JButton();
        jButtonGenPrimeP = new javax.swing.JButton();
        jTextRSAp = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextRSAN = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jTextRSAPhiN = new javax.swing.JTextField();
        jTextRSAE = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jButtonGenRSAE = new javax.swing.JButton();
        jTextRSAD = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jButtonComputeRSAD = new javax.swing.JButton();
        jButtonSavePublicRSA = new javax.swing.JButton();
        jButtonSavePrivateRSA = new javax.swing.JButton();
        jButtonLoadPrivateRSA = new javax.swing.JButton();
        jButtonLoadPublicRSA = new javax.swing.JButton();
        jButtonBrowseRSA = new javax.swing.JButton();
        jTextFilePathRSA = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextAreaFileContentRSA = new javax.swing.JTextArea();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jTextMD5RSA = new javax.swing.JTextField();
        jButtonEncryptRSA = new javax.swing.JButton();
        jButtonDecryptRSA = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        _LoggerRSA = new javax.swing.JTextArea();
        jComboBoxBitQ = new javax.swing.JComboBox();
        jComboBoxBitP = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jRadioPKCS5Blowfish = new javax.swing.JRadioButton();
        jRadioISOBlowfish = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jRadioECBBlowfish = new javax.swing.JRadioButton();
        jRadioCBCBlowfish = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jTextKeyBlowfish = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextIVBlowfish = new javax.swing.JTextField();
        jButtonBrowseKeyBlowfish = new javax.swing.JButton();
        jButtonBrowseIVBlowfish = new javax.swing.JButton();
        jButtonSaveIVBlowfish = new javax.swing.JButton();
        jButtonSaveKeyBlowfish = new javax.swing.JButton();
        jButtonGenKeyBlowfish = new javax.swing.JButton();
        jButtonGenIVBlowfish = new javax.swing.JButton();
        jTextFilePathBlowfish = new javax.swing.JTextField();
        jButtonBrowseFileBlowfish = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextAreaFileContentBlowfish = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jTextMD5Blowfish = new javax.swing.JTextField();
        jButtonEncryptBlowfish = new javax.swing.JButton();
        jButtonDecryptBlowfish = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        _LoggerBlowfish = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cryptography algorythm");
        setMinimumSize(new java.awt.Dimension(690, 501));
        setResizable(false);

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(690, 501));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Padding"));
        jPanel5.setPreferredSize(new java.awt.Dimension(81, 74));

        paddingButtonGroup.add(jRadioPKCS5);
        jRadioPKCS5.setSelected(true);
        jRadioPKCS5.setText("PKCS5");
        jRadioPKCS5.setToolTipText("");
        jRadioPKCS5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioPKCS5ActionPerformed(evt);
            }
        });

        paddingButtonGroup.add(jRadioISO10126);
        jRadioISO10126.setText("ISO10126");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jRadioPKCS5)
            .addComponent(jRadioISO10126)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioPKCS5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioISO10126)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Mode"));

        modeButtonGroup.add(jRadioECB);
        jRadioECB.setSelected(true);
        jRadioECB.setText("ECB");

        modeButtonGroup.add(jRadioCBC);
        jRadioCBC.setText("CBC");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioCBC)
                    .addComponent(jRadioECB))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jRadioECB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioCBC)
                .addContainerGap())
        );

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Implementing a simple encrypt/decrypt file application\nusing DES algorythm\n- You can choose an existed key/IV (directly input or from file) or generate it randomly and save it for later use\n- You can choose a file or a folder\n- Block size: 64 bit - Key size: 64 bit");
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setBorder(null);
        jTextArea1.setDisabledTextColor(new java.awt.Color(25, 80, 189));
        jTextArea1.setEnabled(false);
        jTextArea1.setPreferredSize(new java.awt.Dimension(260, 90));
        jScrollPane1.setViewportView(jTextArea1);

        jTextKeyDES.setToolTipText("64 bit (8 byte) key");

        jLabel1.setText("Key (hex): ");

        jLabel2.setText("IV (hex):");

        jTextIVDES.setToolTipText("64 bit (8 byte) Initialize Vector");

        jButtonBrowseKey.setText("Browse");
        jButtonBrowseKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseKeyActionPerformed(evt);
            }
        });

        jButtonBrowseIV.setText("Browse");
        jButtonBrowseIV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseIVActionPerformed(evt);
            }
        });

        jButtonSaveIV.setText("Save");
        jButtonSaveIV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveIVActionPerformed(evt);
            }
        });

        jButtonSaveKey.setText("Save");
        jButtonSaveKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveKeyActionPerformed(evt);
            }
        });

        jButtonGenKey.setText("Generate Random Key");
        jButtonGenKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenKeyActionPerformed(evt);
            }
        });

        jButtonGenIV.setText("Geneate Random IV");
        jButtonGenIV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenIVActionPerformed(evt);
            }
        });

        jTextFilePathDES.setEditable(false);
        jTextFilePathDES.setToolTipText("64 bit (8 byte) Initialize Vector");

        jButtonBrowseFile.setText("Browse");
        jButtonBrowseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseFileActionPerformed(evt);
            }
        });

        jLabel3.setText("File (Folder):");

        jLabel4.setText("File content");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("(hex):");

        jTextAreaFileContentDES.setEditable(false);
        jTextAreaFileContentDES.setColumns(20);
        jTextAreaFileContentDES.setLineWrap(true);
        jTextAreaFileContentDES.setRows(5);
        jTextAreaFileContentDES.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextAreaFileContentDES);

        jLabel6.setText("MD5:");

        jTextMD5DES.setEditable(false);
        jTextMD5DES.setToolTipText("64 bit (8 byte) Initialize Vector");

        jButtonEncrypt.setText("Encrypt");
        jButtonEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEncryptActionPerformed(evt);
            }
        });

        jButtonDecrypt.setText("Decrypt");
        jButtonDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecryptActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));

        _LoggerDES.setColumns(20);
        _LoggerDES.setLineWrap(true);
        _LoggerDES.setRows(5);
        jScrollPane4.setViewportView(_LoggerDES);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane4)
                .addGap(0, 0, 0))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextMD5DES)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextFilePathDES)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonBrowseFile))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextKeyDES)
                                    .addComponent(jTextIVDES))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonBrowseIV)
                                    .addComponent(jButtonBrowseKey))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonSaveIV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonSaveKey, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButtonEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButtonGenKey, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonGenIV, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextKeyDES, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextIVDES, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonBrowseKey)
                                .addGap(12, 12, 12)
                                .addComponent(jButtonBrowseIV))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonSaveKey)
                                .addGap(12, 12, 12)
                                .addComponent(jButtonSaveIV)))
                        .addGap(1, 1, 1)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGenKey)
                    .addComponent(jButtonGenIV))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBrowseFile)
                    .addComponent(jTextFilePathDES, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextMD5DES, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEncrypt)
                    .addComponent(jButtonDecrypt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        jTabbedPane1.addTab("DES", jPanel1);

        jPanel2.setForeground(new java.awt.Color(46, 81, 159));

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Mode"));

        modeRSAbuttonGroup1.add(jRadioECBRSA);
        jRadioECBRSA.setSelected(true);
        jRadioECBRSA.setText("ECB");

        modeButtonGroup.add(jRadioCBC2);
        jRadioCBC2.setText("CBC");
        jRadioCBC2.setEnabled(false);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioCBC2)
                    .addComponent(jRadioECBRSA))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jRadioECBRSA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioCBC2)
                .addContainerGap())
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Padding"));
        jPanel12.setPreferredSize(new java.awt.Dimension(81, 74));

        paddingRSAButtonGroup1.add(jRadioPKCS1RSA);
        jRadioPKCS1RSA.setSelected(true);
        jRadioPKCS1RSA.setText("PKCS1");

        paddingButtonGroup.add(jRadioLZero3);
        jRadioLZero3.setText("ISO10126");
        jRadioLZero3.setEnabled(false);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jRadioPKCS1RSA)
            .addComponent(jRadioLZero3)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioPKCS1RSA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioLZero3)
                .addContainerGap())
        );

        jTextArea5.setEditable(false);
        jTextArea5.setColumns(20);
        jTextArea5.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextArea5.setLineWrap(true);
        jTextArea5.setRows(5);
        jTextArea5.setText("Implementing a simple encrypt/decrypt file application\nusing RSA algorythm\n- You can choose an existed private (public) key (directly input or from file) or generate it randomly and save it for later use\n- You can choose a file or a folder");
        jTextArea5.setAutoscrolls(false);
        jTextArea5.setBorder(null);
        jTextArea5.setDisabledTextColor(new java.awt.Color(25, 80, 189));
        jTextArea5.setEnabled(false);
        jTextArea5.setPreferredSize(new java.awt.Dimension(260, 90));
        jScrollPane7.setViewportView(jTextArea5);

        jLabel13.setText("Prime q:");

        jTextRSAq.setToolTipText("64 bit (8 byte) key");

        jButtonGenPrimeQ.setText("Generate Random");
        jButtonGenPrimeQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenPrimeQActionPerformed(evt);
            }
        });

        jButtonGenPrimeP.setText("Generate Random");
        jButtonGenPrimeP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenPrimePActionPerformed(evt);
            }
        });

        jTextRSAp.setToolTipText("64 bit (8 byte) key");

        jLabel14.setText("Prime p:");

        jLabel15.setText("n = p * q:");

        jTextRSAN.setEditable(false);
        jTextRSAN.setToolTipText("64 bit (8 byte) key");

        jLabel16.setText("phi(n):");

        jTextRSAPhiN.setEditable(false);
        jTextRSAPhiN.setToolTipText("64 bit (8 byte) key");

        jTextRSAE.setToolTipText("64 bit (8 byte) key");

        jLabel17.setText("Private e:");

        jButtonGenRSAE.setText("Generate Random");
        jButtonGenRSAE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenRSAEActionPerformed(evt);
            }
        });

        jTextRSAD.setEditable(false);
        jTextRSAD.setToolTipText("64 bit (8 byte) key");

        jLabel18.setText("Public d:");

        jButtonComputeRSAD.setText("Compute");
        jButtonComputeRSAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonComputeRSADActionPerformed(evt);
            }
        });

        jButtonSavePublicRSA.setText("Save Public key");
        jButtonSavePublicRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSavePublicRSAActionPerformed(evt);
            }
        });

        jButtonSavePrivateRSA.setText("Save Private key");
        jButtonSavePrivateRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSavePrivateRSAActionPerformed(evt);
            }
        });

        jButtonLoadPrivateRSA.setText("Load Private key");
        jButtonLoadPrivateRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadPrivateRSAActionPerformed(evt);
            }
        });

        jButtonLoadPublicRSA.setText("Load Public key");
        jButtonLoadPublicRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadPublicRSAActionPerformed(evt);
            }
        });

        jButtonBrowseRSA.setText("Browse");
        jButtonBrowseRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseRSAActionPerformed(evt);
            }
        });

        jTextFilePathRSA.setEditable(false);
        jTextFilePathRSA.setToolTipText("64 bit (8 byte) key");

        jLabel19.setText("File");

        jLabel20.setText("File content");

        jTextAreaFileContentRSA.setEditable(false);
        jTextAreaFileContentRSA.setColumns(20);
        jTextAreaFileContentRSA.setLineWrap(true);
        jTextAreaFileContentRSA.setRows(5);
        jTextAreaFileContentRSA.setWrapStyleWord(true);
        jScrollPane8.setViewportView(jTextAreaFileContentRSA);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("(hex):");

        jLabel22.setText("MD5");

        jTextMD5RSA.setEditable(false);
        jTextMD5RSA.setToolTipText("64 bit (8 byte) key");

        jButtonEncryptRSA.setText("Encrypt");
        jButtonEncryptRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEncryptRSAActionPerformed(evt);
            }
        });

        jButtonDecryptRSA.setText("Decrypt");
        jButtonDecryptRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecryptRSAActionPerformed(evt);
            }
        });

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));

        _LoggerRSA.setColumns(20);
        _LoggerRSA.setLineWrap(true);
        _LoggerRSA.setRows(5);
        jScrollPane9.setViewportView(_LoggerRSA);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane9)
                .addGap(0, 0, 0))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
        );

        jComboBoxBitQ.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "512 bit", "1024 bit" }));

        jComboBoxBitP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "512 bit", "1024 bit" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButtonEncryptRSA, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonDecryptRSA, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jTextRSAE, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonGenRSAE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane7))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jTextRSAD, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonComputeRSAD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jScrollPane8)
                                    .addComponent(jTextMD5RSA)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jButtonSavePublicRSA, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonSavePrivateRSA, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonLoadPublicRSA, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonLoadPrivateRSA, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jTextRSAq, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButtonGenPrimeQ, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jComboBoxBitQ, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addComponent(jTextRSAN, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                    .addComponent(jTextRSAp, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jTextRSAPhiN)
                                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addComponent(jButtonGenPrimeP, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jComboBoxBitP, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jTextFilePathRSA)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButtonBrowseRSA, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(1, 1, 1)))
                                .addGap(17, 17, 17))))
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonSavePrivateRSA, jButtonSavePublicRSA});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(jScrollPane7))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextRSAq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jButtonGenPrimeQ)
                    .addComponent(jComboBoxBitQ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextRSAp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jButtonGenPrimeP)
                    .addComponent(jComboBoxBitP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextRSAN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jTextRSAPhiN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextRSAE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(jButtonGenRSAE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextRSAD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jButtonComputeRSAD))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonLoadPublicRSA, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonLoadPrivateRSA, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonSavePrivateRSA, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonSavePublicRSA, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFilePathRSA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(jButtonBrowseRSA))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextMD5RSA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonDecryptRSA, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonEncryptRSA, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("RSA", jPanel2);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Padding"));
        jPanel7.setPreferredSize(new java.awt.Dimension(81, 74));

        paddingBlowfishButtonGroup1.add(jRadioPKCS5Blowfish);
        jRadioPKCS5Blowfish.setSelected(true);
        jRadioPKCS5Blowfish.setText("PKCS5");
        jRadioPKCS5Blowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioPKCS5BlowfishActionPerformed(evt);
            }
        });

        paddingBlowfishButtonGroup1.add(jRadioISOBlowfish);
        jRadioISOBlowfish.setText("ISO10126");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jRadioPKCS5Blowfish)
            .addComponent(jRadioISOBlowfish)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioPKCS5Blowfish)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioISOBlowfish)
                .addContainerGap())
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Mode"));

        modeBlowfishButtonGroup1.add(jRadioECBBlowfish);
        jRadioECBBlowfish.setSelected(true);
        jRadioECBBlowfish.setText("ECB");

        modeBlowfishButtonGroup1.add(jRadioCBCBlowfish);
        jRadioCBCBlowfish.setText("CBC");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioCBCBlowfish)
                    .addComponent(jRadioECBBlowfish))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jRadioECBBlowfish)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioCBCBlowfish)
                .addContainerGap())
        );

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextArea3.setLineWrap(true);
        jTextArea3.setRows(5);
        jTextArea3.setText("Implementing a simple encrypt/decrypt file application\nusing Blowfish algorythm\n- You can choose an existed key/IV (directly input or from file) or generate it randomly and save it for later use\n- You can choose a file or a folder\n- Block size: 64 bit - Key size: 256 bit");
        jTextArea3.setAutoscrolls(false);
        jTextArea3.setBorder(null);
        jTextArea3.setDisabledTextColor(new java.awt.Color(25, 80, 189));
        jTextArea3.setEnabled(false);
        jTextArea3.setPreferredSize(new java.awt.Dimension(260, 90));
        jScrollPane3.setViewportView(jTextArea3);

        jTextKeyBlowfish.setToolTipText("64 bit (8 byte) key");

        jLabel7.setText("Key (hex): ");

        jLabel8.setText("IV (hex):");

        jTextIVBlowfish.setToolTipText("64 bit (8 byte) Initialize Vector");

        jButtonBrowseKeyBlowfish.setText("Browse");
        jButtonBrowseKeyBlowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseKeyBlowfishActionPerformed(evt);
            }
        });

        jButtonBrowseIVBlowfish.setText("Browse");
        jButtonBrowseIVBlowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseIVBlowfishActionPerformed(evt);
            }
        });

        jButtonSaveIVBlowfish.setText("Save");
        jButtonSaveIVBlowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveIVBlowfishActionPerformed(evt);
            }
        });

        jButtonSaveKeyBlowfish.setText("Save");
        jButtonSaveKeyBlowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveKeyBlowfishActionPerformed(evt);
            }
        });

        jButtonGenKeyBlowfish.setText("Generate Random Key");
        jButtonGenKeyBlowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenKeyBlowfishActionPerformed(evt);
            }
        });

        jButtonGenIVBlowfish.setText("Geneate Random IV");
        jButtonGenIVBlowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenIVBlowfishActionPerformed(evt);
            }
        });

        jTextFilePathBlowfish.setEditable(false);
        jTextFilePathBlowfish.setToolTipText("64 bit (8 byte) Initialize Vector");

        jButtonBrowseFileBlowfish.setText("Browse");
        jButtonBrowseFileBlowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseFileBlowfishActionPerformed(evt);
            }
        });

        jLabel9.setText("File (Folder):");

        jLabel10.setText("File content");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("(hex):");

        jTextAreaFileContentBlowfish.setEditable(false);
        jTextAreaFileContentBlowfish.setColumns(20);
        jTextAreaFileContentBlowfish.setLineWrap(true);
        jTextAreaFileContentBlowfish.setRows(5);
        jTextAreaFileContentBlowfish.setWrapStyleWord(true);
        jScrollPane5.setViewportView(jTextAreaFileContentBlowfish);

        jLabel12.setText("MD5:");

        jTextMD5Blowfish.setEditable(false);
        jTextMD5Blowfish.setToolTipText("64 bit (8 byte) Initialize Vector");

        jButtonEncryptBlowfish.setText("Encrypt");
        jButtonEncryptBlowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEncryptBlowfishActionPerformed(evt);
            }
        });

        jButtonDecryptBlowfish.setText("Decrypt");
        jButtonDecryptBlowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecryptBlowfishActionPerformed(evt);
            }
        });

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));

        _LoggerBlowfish.setColumns(20);
        _LoggerBlowfish.setLineWrap(true);
        _LoggerBlowfish.setRows(5);
        jScrollPane6.setViewportView(_LoggerBlowfish);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane6)
                .addGap(0, 0, 0))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel7)
                                .addComponent(jLabel8)
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextMD5Blowfish)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jTextFilePathBlowfish)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonBrowseFileBlowfish))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextKeyBlowfish)
                                    .addComponent(jTextIVBlowfish))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonBrowseIVBlowfish)
                                    .addComponent(jButtonBrowseKeyBlowfish))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonSaveIVBlowfish, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonSaveKeyBlowfish, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane5)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jButtonEncryptBlowfish, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonDecryptBlowfish, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jButtonGenKeyBlowfish, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonGenIVBlowfish, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextKeyBlowfish, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextIVBlowfish, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButtonBrowseKeyBlowfish)
                                .addGap(12, 12, 12)
                                .addComponent(jButtonBrowseIVBlowfish))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButtonSaveKeyBlowfish)
                                .addGap(12, 12, 12)
                                .addComponent(jButtonSaveIVBlowfish)))
                        .addGap(1, 1, 1)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGenKeyBlowfish)
                    .addComponent(jButtonGenIVBlowfish))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBrowseFileBlowfish)
                    .addComponent(jTextFilePathBlowfish, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextMD5Blowfish, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEncryptBlowfish)
                    .addComponent(jButtonDecryptBlowfish))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        jTabbedPane1.addTab("Blowfish", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioPKCS5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioPKCS5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioPKCS5ActionPerformed

    private void jRadioPKCS5BlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioPKCS5BlowfishActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioPKCS5BlowfishActionPerformed

    private void jButtonBrowseKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseKeyActionPerformed
        // TODO add your handling code here:
        fileChooser.showDialog(this, "Select key file for DES");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            filepath = file.getPath();
            jTextKeyDES.setText(readContentFile(filepath));
        }
     }//GEN-LAST:event_jButtonBrowseKeyActionPerformed

    private void jButtonBrowseIVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseIVActionPerformed
        fileChooser.showDialog(this, "Select initialize vector file for DES");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            filepath = file.getPath();
            jTextIVDES.setText(readContentFile(filepath));
        }
    }//GEN-LAST:event_jButtonBrowseIVActionPerformed

    private void jButtonSaveKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveKeyActionPerformed
        fileChooser.showDialog(this, "Save");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            filepath = file.getPath();
            saveContentFile(filepath, jTextKeyDES.getText(), _LoggerDES);
        }
    }//GEN-LAST:event_jButtonSaveKeyActionPerformed

    private void jButtonSaveIVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveIVActionPerformed
        fileChooser.showDialog(this, "Save");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            filepath = file.getPath();
            saveContentFile(filepath, jTextIVDES.getText(), _LoggerDES);
        }
    }//GEN-LAST:event_jButtonSaveIVActionPerformed

    private void jButtonGenKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenKeyActionPerformed
        String keyDES = CryptographyModel.genDESKey();
        jTextKeyDES.setText(keyDES);
    }//GEN-LAST:event_jButtonGenKeyActionPerformed

    private void jButtonGenIVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenIVActionPerformed
        String keyDES = CryptographyModel.genDESKey();
        jTextIVDES.setText(keyDES);
    }//GEN-LAST:event_jButtonGenIVActionPerformed

    private void jButtonBrowseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseFileActionPerformed
        fileChooser.showDialog(this, "Choose file to encrypt/decrypt");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            filepath = file.getPath();
            jTextFilePathDES.setText(filepath);
            jTextAreaFileContentDES.setText(CryptographyModel.fileContentHex(filepath));
            jTextMD5DES.setText(CryptographyModel.getMD5Checksum(filepath));
        }
    }//GEN-LAST:event_jButtonBrowseFileActionPerformed

    private void jButtonEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncryptActionPerformed
        Thread cryptoThread = new Thread(new Runnable() {
            @Override
            public void run() {
                CryptographyModel.ModeBlockCipher modeBlock = jRadioCBC.isSelected()
                        ? CryptographyModel.ModeBlockCipher.CBC : CryptographyModel.ModeBlockCipher.ECB;
                CryptographyModel.ModePadding modePadding = jRadioPKCS5.isSelected()
                        ? CryptographyModel.ModePadding.PKCS5 : CryptographyModel.ModePadding.ISO10126;
                String key = jTextKeyDES.getText();
                String iv = jTextIVDES.getText();
                String file = jTextFilePathDES.getText();
                if (modeBlock == null || modePadding == null || key.isEmpty() || file.isEmpty()) {
                    _LoggerDES.append("Missing infomation. Please check again.\n");
                    return;
                }
                if (modeBlock == CryptographyModel.ModeBlockCipher.CBC && iv.isEmpty()) {
                    _LoggerDES.append("Missing Initialize Vector. Please check again.\n");
                    return;
                }
                File fileProcess = new File(file);
                if (fileProcess.isDirectory()) {
                    for (File fi : fileProcess.listFiles()) {
                        _LoggerDES.append("Original file MD5 checksum:" + CryptographyModel.getMD5Checksum(fi.getAbsolutePath()) + "\n");
                        String cryptoDESFilepath = CryptographyModel.cryptoDESFile(CryptographyModel.ModeCrypto.ENCRYPT,
                                modeBlock, modePadding, key, iv, fi.getAbsolutePath(), _LoggerDES);
                        if (!cryptoDESFilepath.isEmpty()) {
                            if (!cryptoDESFilepath.isEmpty()) {
                                _LoggerDES.append("Encrypt successfully at:" + cryptoDESFilepath + "\n");
                            } else {
                                _LoggerDES.append("Encrypt unsuccessfully!\n");
                            }
                        }
                    }
                } else {
                    _LoggerDES.append("Original file MD5 checksum:" + CryptographyModel.getMD5Checksum(file) + "\n");
                    String cryptoDESFilepath = CryptographyModel.cryptoDESFile(CryptographyModel.ModeCrypto.ENCRYPT,
                            modeBlock, modePadding, key, iv, file, _LoggerDES);
                    if (!cryptoDESFilepath.isEmpty()) {
                        _LoggerDES.append("Encrypt successfully at:" + cryptoDESFilepath + "\n");
                    } else {
                        _LoggerDES.append("Encrypt unsuccessfully!\n");
                    }
                }

            }
        }
        );
        cryptoThread.start();
    }//GEN-LAST:event_jButtonEncryptActionPerformed

    private void jButtonDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecryptActionPerformed
        Thread cryptoThread = new Thread(new Runnable() {
            @Override
            public void run() {
                CryptographyModel.ModeBlockCipher modeBlock = jRadioCBC.isSelected()
                        ? CryptographyModel.ModeBlockCipher.CBC : CryptographyModel.ModeBlockCipher.ECB;
                CryptographyModel.ModePadding modePadding = jRadioPKCS5.isSelected()
                        ? CryptographyModel.ModePadding.PKCS5 : CryptographyModel.ModePadding.ISO10126;
                String key = jTextKeyDES.getText();
                String iv = jTextIVDES.getText();
                String file = jTextFilePathDES.getText();
                if (modeBlock == null || modePadding == null || key.isEmpty() || file.isEmpty()) {
                    _LoggerDES.append("Missing infomation. Please check again.\n");
                    return;
                }
                if (modeBlock == CryptographyModel.ModeBlockCipher.CBC && iv.isEmpty()) {
                    _LoggerDES.append("Missing Initialize Vector. Please check again.\n");
                    return;
                }
                File fileProcess = new File(file);
                if (fileProcess.isDirectory()) {
                    for (File fi : fileProcess.listFiles()) {
                        String cryptoDESFilepath = CryptographyModel.cryptoDESFile(CryptographyModel.ModeCrypto.DECRYPT,
                                modeBlock, modePadding, key, iv, fi.getAbsolutePath(), _LoggerDES);
                        if (!cryptoDESFilepath.isEmpty()) {
                            _LoggerDES.append("Decrypt successfully at:" + cryptoDESFilepath + " with MD5 checksum: "
                                    + CryptographyModel.getMD5Checksum(cryptoDESFilepath) + "\n");
                        } else {
                            _LoggerDES.append("Decrypt unsuccessfully!\n");
                        }
                    }
                } else {
                    String cryptoDESFilepath = CryptographyModel.cryptoDESFile(CryptographyModel.ModeCrypto.DECRYPT,
                            modeBlock, modePadding, key, iv, file, _LoggerDES);
                    if (!cryptoDESFilepath.isEmpty()) {
                        _LoggerDES.append("Decrypt successfully at:" + cryptoDESFilepath + " with MD5 checksum: "
                                + CryptographyModel.getMD5Checksum(cryptoDESFilepath) + "\n");
                    } else {
                        _LoggerDES.append("Decrypt unsuccessfully!\n");
                    }
                }
            }
        }
        );
        cryptoThread.start();
    }//GEN-LAST:event_jButtonDecryptActionPerformed

    private void jButtonBrowseKeyBlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseKeyBlowfishActionPerformed
        fileChooser.showDialog(this, "Select key file for Blowfish");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            filepath = file.getPath();
            jTextKeyBlowfish.setText(readContentFile(filepath));
        }
    }//GEN-LAST:event_jButtonBrowseKeyBlowfishActionPerformed

    private void jButtonBrowseIVBlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseIVBlowfishActionPerformed
        fileChooser.showDialog(this, "Select initialize vector file for Blowfish");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            filepath = file.getPath();
            jTextIVBlowfish.setText(readContentFile(filepath));
        }
    }//GEN-LAST:event_jButtonBrowseIVBlowfishActionPerformed

    private void jButtonSaveKeyBlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveKeyBlowfishActionPerformed
        fileChooser.showDialog(this, "Save");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            filepath = file.getPath();
            saveContentFile(filepath, jTextKeyBlowfish.getText(), _LoggerBlowfish);
        }
    }//GEN-LAST:event_jButtonSaveKeyBlowfishActionPerformed

    private void jButtonSaveIVBlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveIVBlowfishActionPerformed
        fileChooser.showDialog(this, "Save");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            filepath = file.getPath();
            saveContentFile(filepath, jTextIVBlowfish.getText(), _LoggerBlowfish);
        }
    }//GEN-LAST:event_jButtonSaveIVBlowfishActionPerformed

    private void jButtonGenKeyBlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenKeyBlowfishActionPerformed
        String keyBlowfish = CryptographyModel.genBlowfishKey();
        jTextKeyBlowfish.setText(keyBlowfish);
    }//GEN-LAST:event_jButtonGenKeyBlowfishActionPerformed

    private void jButtonGenIVBlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenIVBlowfishActionPerformed
        String keyDES = CryptographyModel.genDESKey();
        jTextIVBlowfish.setText(keyDES);
    }//GEN-LAST:event_jButtonGenIVBlowfishActionPerformed

    private void jButtonBrowseFileBlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseFileBlowfishActionPerformed
        fileChooser.showDialog(this, "Choose file to encrypt/decrypt");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            filepath = file.getPath();
            jTextFilePathBlowfish.setText(filepath);
            jTextAreaFileContentBlowfish.setText(CryptographyModel.fileContentHex(filepath));
            jTextMD5Blowfish.setText(CryptographyModel.getMD5Checksum(filepath));
        }
    }//GEN-LAST:event_jButtonBrowseFileBlowfishActionPerformed

    private void jButtonEncryptBlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncryptBlowfishActionPerformed
        Thread cryptoThread = new Thread(new Runnable() {
            @Override
            public void run() {
                CryptographyModel.ModeBlockCipher modeBlock = jRadioCBCBlowfish.isSelected()
                        ? CryptographyModel.ModeBlockCipher.CBC : CryptographyModel.ModeBlockCipher.ECB;
                CryptographyModel.ModePadding modePadding = jRadioPKCS5Blowfish.isSelected()
                        ? CryptographyModel.ModePadding.PKCS5 : CryptographyModel.ModePadding.ISO10126;
                String key = jTextKeyBlowfish.getText();
                String iv = jTextIVBlowfish.getText();
                String file = jTextFilePathBlowfish.getText();
                if (modeBlock == null || modePadding == null || key.isEmpty() || file.isEmpty()) {
                    _LoggerBlowfish.append("Missing infomation. Please check again.\n");
                    return;
                }
                if (modeBlock == CryptographyModel.ModeBlockCipher.CBC && iv.isEmpty()) {
                    _LoggerBlowfish.append("Missing Initialize Vector. Please check again.\n");
                    return;
                }
                File fileProcess = new File(file);
                if (fileProcess.isDirectory()) {
                    for (File fi : fileProcess.listFiles()) {
                        _LoggerBlowfish.append("Original file MD5 checksum:" + CryptographyModel.getMD5Checksum(fi.getAbsolutePath()) + "\n");
                        String cryptoBlowfishFilepath = CryptographyModel.cryptoBlowfishFile(CryptographyModel.ModeCrypto.ENCRYPT,
                                modeBlock, modePadding, key, iv, fi.getAbsolutePath(), _LoggerBlowfish);
                        if (!cryptoBlowfishFilepath.isEmpty()) {
                            if (!cryptoBlowfishFilepath.isEmpty()) {
                                _LoggerBlowfish.append("Encrypt successfully at:" + cryptoBlowfishFilepath + "\n");
                            } else {
                                _LoggerBlowfish.append("Encrypt unsuccessfully!\n");
                            }
                        }
                    }
                } else {
                    _LoggerBlowfish.append("Original file MD5 checksum:" + CryptographyModel.getMD5Checksum(file) + "\n");
                    String cryptoBlowfishFilepath = CryptographyModel.cryptoBlowfishFile(CryptographyModel.ModeCrypto.ENCRYPT,
                            modeBlock, modePadding, key, iv, file, _LoggerBlowfish);
                    if (!cryptoBlowfishFilepath.isEmpty()) {
                        _LoggerBlowfish.append("Encrypt successfully at:" + cryptoBlowfishFilepath + "\n");
                    } else {
                        _LoggerBlowfish.append("Encrypt unsuccessfully!\n");
                    }
                }

            }
        }
        );
        cryptoThread.start();
    }//GEN-LAST:event_jButtonEncryptBlowfishActionPerformed

    private void jButtonDecryptBlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecryptBlowfishActionPerformed
        Thread cryptoThread = new Thread(new Runnable() {
            @Override
            public void run() {
                CryptographyModel.ModeBlockCipher modeBlock = jRadioCBCBlowfish.isSelected()
                        ? CryptographyModel.ModeBlockCipher.CBC : CryptographyModel.ModeBlockCipher.ECB;
                CryptographyModel.ModePadding modePadding = jRadioPKCS5Blowfish.isSelected()
                        ? CryptographyModel.ModePadding.PKCS5 : CryptographyModel.ModePadding.ISO10126;
                String key = jTextKeyBlowfish.getText();
                String iv = jTextIVBlowfish.getText();
                String file = jTextFilePathBlowfish.getText();
                if (modeBlock == null || modePadding == null || key.isEmpty() || file.isEmpty()) {
                    _LoggerBlowfish.append("Missing infomation. Please check again.\n");
                    return;
                }
                if (modeBlock == CryptographyModel.ModeBlockCipher.CBC && iv.isEmpty()) {
                    _LoggerBlowfish.append("Missing Initialize Vector. Please check again.\n");
                    return;
                }
                File fileProcess = new File(file);
                if (fileProcess.isDirectory()) {
                    for (File fi : fileProcess.listFiles()) {
                        String cryptoDESFilepath = CryptographyModel.cryptoBlowfishFile(CryptographyModel.ModeCrypto.DECRYPT,
                                modeBlock, modePadding, key, iv, fi.getAbsolutePath(), _LoggerBlowfish);
                        if (!cryptoDESFilepath.isEmpty()) {
                            _LoggerBlowfish.append("Decrypt successfully at:" + cryptoDESFilepath + " with MD5 checksum: "
                                    + CryptographyModel.getMD5Checksum(cryptoDESFilepath) + "\n");
                        } else {
                            _LoggerBlowfish.append("Decrypt unsuccessfully!\n");
                        }
                    }
                } else {
                    String cryptoDESFilepath = CryptographyModel.cryptoBlowfishFile(CryptographyModel.ModeCrypto.DECRYPT,
                            modeBlock, modePadding, key, iv, file, _LoggerBlowfish);
                    if (!cryptoDESFilepath.isEmpty()) {
                        _LoggerBlowfish.append("Decrypt successfully at:" + cryptoDESFilepath + " with MD5 checksum: "
                                + CryptographyModel.getMD5Checksum(cryptoDESFilepath) + "\n");
                    } else {
                        _LoggerBlowfish.append("Decrypt unsuccessfully!\n");
                    }
                }
            }
        }
        );
        cryptoThread.start();
    }//GEN-LAST:event_jButtonDecryptBlowfishActionPerformed

    private void jButtonGenPrimeQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenPrimeQActionPerformed
        int bit = jComboBoxBitQ.getSelectedIndex() == 0 ? 512 : 1024;
        BigInteger keyRSA = CryptographyModel.genPrime(bit);
        jTextRSAq.setText(keyRSA.toString());
    }//GEN-LAST:event_jButtonGenPrimeQActionPerformed

    private void jButtonGenPrimePActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenPrimePActionPerformed
        int bit = jComboBoxBitQ.getSelectedIndex() == 0 ? 512 : 1024;
        BigInteger keyRSA = CryptographyModel.genPrime(bit);
        jTextRSAp.setText(keyRSA.toString());
    }//GEN-LAST:event_jButtonGenPrimePActionPerformed

    private void jButtonGenRSAEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenRSAEActionPerformed
        if (!jTextRSAPhiN.getText().isEmpty()) {
            BigInteger phiN = new BigInteger(jTextRSAPhiN.getText());
            BigInteger e = CryptographyModel.genPublicExponent(phiN);
            jTextRSAE.setText(e.toString());
        }
    }//GEN-LAST:event_jButtonGenRSAEActionPerformed

    private void jButtonComputeRSADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonComputeRSADActionPerformed
        if (!jTextRSAPhiN.getText().isEmpty() && !jTextRSAE.getText().isEmpty()) {
            BigInteger phiN = new BigInteger(jTextRSAPhiN.getText());
            BigInteger e = new BigInteger(jTextRSAE.getText());
            BigInteger d = CryptographyModel.genPrivateExponent(e, phiN);
            jTextRSAD.setText(d.toString());
        }
    }//GEN-LAST:event_jButtonComputeRSADActionPerformed

    private void jButtonSavePublicRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSavePublicRSAActionPerformed
        if (!jTextRSAN.getText().isEmpty() && !jTextRSAE.getText().isEmpty()) {
            fileChooser.showDialog(this, "Save");
            File file = fileChooser.getSelectedFile();

            if (file != null) {
                filepath = file.getPath();
                BigInteger n = new BigInteger(jTextRSAN.getText());
                BigInteger e = new BigInteger(jTextRSAE.getText());
                String content = n.toString() + "\n" + e.toString();
                saveContentFile(filepath, content, _LoggerRSA);
            }
        }
    }//GEN-LAST:event_jButtonSavePublicRSAActionPerformed

    private void jButtonSavePrivateRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSavePrivateRSAActionPerformed
        if (!jTextRSAN.getText().isEmpty() && !jTextRSAD.getText().isEmpty()) {
            fileChooser.showDialog(this, "Save");
            File file = fileChooser.getSelectedFile();

            if (file != null) {
                filepath = file.getPath();
                BigInteger n = new BigInteger(jTextRSAN.getText());
                BigInteger d = new BigInteger(jTextRSAD.getText());
                String content = n.toString() + "\n" + d.toString();
                saveContentFile(filepath, content, _LoggerRSA);
            }
        }
    }//GEN-LAST:event_jButtonSavePrivateRSAActionPerformed

    private void jButtonLoadPublicRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadPublicRSAActionPerformed
        fileChooser.showDialog(this, "Select public key file for RSA");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            filepath = file.getPath();
            String readContentFile = readContentFile(filepath);
            try {
                String n = readContentFile.split("\n")[0];
                String e = readContentFile.split("\n")[1];
                jTextRSAN.setText(n);
                jTextRSAE.setText(e);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_jButtonLoadPublicRSAActionPerformed

    private void jButtonLoadPrivateRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadPrivateRSAActionPerformed
        fileChooser.showDialog(this, "Select private key file for RSA");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            filepath = file.getPath();
            String readContentFile = readContentFile(filepath);
            try {
                String n = readContentFile.split("\n")[0];
                String d = readContentFile.split("\n")[1];
                jTextRSAN.setText(n);
                jTextRSAD.setText(d);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_jButtonLoadPrivateRSAActionPerformed

    private void jButtonBrowseRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseRSAActionPerformed
        fileChooser.showDialog(this, "Choose file to encrypt/decrypt");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            filepath = file.getPath();
            jTextFilePathRSA.setText(filepath);
            jTextAreaFileContentRSA.setText(CryptographyModel.fileContentHex(filepath));
            jTextMD5RSA.setText(CryptographyModel.getMD5Checksum(filepath));
        }
    }//GEN-LAST:event_jButtonBrowseRSAActionPerformed

    private void jButtonEncryptRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncryptRSAActionPerformed
        Thread cryptoThread = new Thread(new Runnable() {
            @Override
            public void run() {
                CryptographyModel.ModeBlockCipher modeBlock = CryptographyModel.ModeBlockCipher.ECB;
                CryptographyModel.ModePadding modePadding = CryptographyModel.ModePadding.PKCS5;
                String n = jTextRSAN.getText();
                String e = jTextRSAE.getText();
                String file = jTextFilePathRSA.getText();
                if (modeBlock == null || modePadding == null || n.isEmpty() || e.isEmpty() || file.isEmpty()) {
                    _LoggerRSA.append("Missing infomation. Please check again.\n");
                    return;
                }
                File fileProcess = new File(file);
                if (fileProcess.isDirectory()) {
                    for (File fi : fileProcess.listFiles()) {
                        _LoggerRSA.append("Original file MD5 checksum:" + CryptographyModel.getMD5Checksum(fi.getAbsolutePath()) + "\n");
                        String cryptoRSAFilepath = CryptographyModel.cryptoRSAFile(CryptographyModel.ModeCrypto.ENCRYPT,
                                modeBlock, modePadding, new BigInteger(n), new BigInteger(e), new BigInteger(e), fi.getAbsolutePath(), _LoggerRSA);
                        if (!cryptoRSAFilepath.isEmpty()) {
                            if (!cryptoRSAFilepath.isEmpty()) {
                                _LoggerRSA.append("Encrypt successfully at:" + cryptoRSAFilepath + "\n");
                            } else {
                                _LoggerRSA.append("Encrypt unsuccessfully!\n");
                            }
                        }
                    }
                } else {
                    _LoggerRSA.append("Original file MD5 checksum:" + CryptographyModel.getMD5Checksum(file) + "\n");
                    String cryptoRSAFilepath = CryptographyModel.cryptoRSAFile(CryptographyModel.ModeCrypto.ENCRYPT,
                            modeBlock, modePadding, new BigInteger(n), new BigInteger(e), new BigInteger(e), file, _LoggerRSA);
                    if (!cryptoRSAFilepath.isEmpty()) {
                        _LoggerRSA.append("Encrypt successfully at:" + cryptoRSAFilepath + "\n");
                    } else {
                        _LoggerRSA.append("Encrypt unsuccessfully!\n");
                    }
                }

            }
        }
        );
        cryptoThread.start();
    }//GEN-LAST:event_jButtonEncryptRSAActionPerformed

    private void jButtonDecryptRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecryptRSAActionPerformed
        Thread cryptoThread = new Thread(new Runnable() {
            @Override
            public void run() {
                CryptographyModel.ModeBlockCipher modeBlock = CryptographyModel.ModeBlockCipher.ECB;
                CryptographyModel.ModePadding modePadding = CryptographyModel.ModePadding.PKCS5;
                String n = jTextRSAN.getText();
                String d = jTextRSAD.getText();
                String file = jTextFilePathRSA.getText();
                if (modeBlock == null || modePadding == null || n.isEmpty() || d.isEmpty() || file.isEmpty()) {
                    _LoggerRSA.append("Missing infomation. Please check again.\n");
                    return;
                }
                File fileProcess = new File(file);
                if (fileProcess.isDirectory()) {
                    for (File fi : fileProcess.listFiles()) {
                        String cryptoRSAFilepath = CryptographyModel.cryptoRSAFile(CryptographyModel.ModeCrypto.DECRYPT,
                                modeBlock, modePadding, new BigInteger(n), new BigInteger(d), new BigInteger(d), fi.getAbsolutePath(), _LoggerRSA);
                        if (!cryptoRSAFilepath.isEmpty()) {
                            if (!cryptoRSAFilepath.isEmpty()) {
                                _LoggerRSA.append("Decrypt successfully at:" + cryptoRSAFilepath + " with MD5 checksum: "
                                        + CryptographyModel.getMD5Checksum(cryptoRSAFilepath) + "\n");
                            } else {
                                _LoggerRSA.append("Decrypt unsuccessfully!\n");
                            }
                        }
                    }
                } else {
                    String cryptoRSAFilepath = CryptographyModel.cryptoRSAFile(CryptographyModel.ModeCrypto.DECRYPT,
                            modeBlock, modePadding, new BigInteger(n), new BigInteger(d), new BigInteger(d), file, _LoggerRSA);
                    if (!cryptoRSAFilepath.isEmpty()) {
                        _LoggerRSA.append("Decrypt successfully at:" + cryptoRSAFilepath + " with MD5 checksum: "
                                + CryptographyModel.getMD5Checksum(cryptoRSAFilepath) + "\n");
                    } else {
                        _LoggerRSA.append("Decrypt unsuccessfully!\n");
                    }
                }

            }
        }
        );
        cryptoThread.start();
    }//GEN-LAST:event_jButtonDecryptRSAActionPerformed

    public void calculateRSANeeded() {
        if (!jTextRSAq.getText().isEmpty() && !jTextRSAp.getText().isEmpty()) {
            BigInteger q = null;
            BigInteger p = null;
            try {
                q = new BigInteger(jTextRSAq.getText());
                p = new BigInteger(jTextRSAp.getText());
            } catch (Exception e) {
            }
            if (p != null && q != null) {
                jTextRSAN.setText(CryptographyModel.computeModulus(p, q).toString());
                jTextRSAPhiN.setText(CryptographyModel.computePhiModulus(p, q).toString());
            }
        }
    }

    private String readContentFile(String filepath) {
        try {
            File file = new File(filepath);
            if (file.length() > 10000) {
                _LoggerDES.append("File to big!\n");
                return "";
            }
            Scanner sc = new Scanner(file);
            String res = "";
            while (sc.hasNextLine()) {
                res += sc.nextLine() + "\n";
            }
            return res;
        } catch (FileNotFoundException ex) {
            _LoggerDES.append("File not found: " + filepath + "\n");
        } catch (Exception ex) {
            _LoggerDES.append("Please choose the right file. Can't read this file!\n");
            ex.printStackTrace();
        }
        return "";
    }

    private void saveContentFile(String filename, String content, JTextArea _Logger) {
        try {
            try (FileOutputStream fos = new FileOutputStream(new File(filename))) {
                fos.write(content.getBytes());
            }
        } catch (FileNotFoundException ex) {
            _Logger.append("File not found: " + filepath + "\n");
        } catch (Exception ex) {
            _Logger.append("Can't save this file. Please choose another name.");
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            System.out.println("Look & Feel Exception");
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CryptoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea _LoggerBlowfish;
    private javax.swing.JTextArea _LoggerDES;
    private javax.swing.JTextArea _LoggerRSA;
    private javax.swing.JButton jButtonBrowseFile;
    private javax.swing.JButton jButtonBrowseFileBlowfish;
    private javax.swing.JButton jButtonBrowseIV;
    private javax.swing.JButton jButtonBrowseIVBlowfish;
    private javax.swing.JButton jButtonBrowseKey;
    private javax.swing.JButton jButtonBrowseKeyBlowfish;
    private javax.swing.JButton jButtonBrowseRSA;
    private javax.swing.JButton jButtonComputeRSAD;
    private javax.swing.JButton jButtonDecrypt;
    private javax.swing.JButton jButtonDecryptBlowfish;
    private javax.swing.JButton jButtonDecryptRSA;
    private javax.swing.JButton jButtonEncrypt;
    private javax.swing.JButton jButtonEncryptBlowfish;
    private javax.swing.JButton jButtonEncryptRSA;
    private javax.swing.JButton jButtonGenIV;
    private javax.swing.JButton jButtonGenIVBlowfish;
    private javax.swing.JButton jButtonGenKey;
    private javax.swing.JButton jButtonGenKeyBlowfish;
    private javax.swing.JButton jButtonGenPrimeP;
    private javax.swing.JButton jButtonGenPrimeQ;
    private javax.swing.JButton jButtonGenRSAE;
    private javax.swing.JButton jButtonLoadPrivateRSA;
    private javax.swing.JButton jButtonLoadPublicRSA;
    private javax.swing.JButton jButtonSaveIV;
    private javax.swing.JButton jButtonSaveIVBlowfish;
    private javax.swing.JButton jButtonSaveKey;
    private javax.swing.JButton jButtonSaveKeyBlowfish;
    private javax.swing.JButton jButtonSavePrivateRSA;
    private javax.swing.JButton jButtonSavePublicRSA;
    private javax.swing.JComboBox jComboBoxBitP;
    private javax.swing.JComboBox jComboBoxBitQ;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioCBC;
    private javax.swing.JRadioButton jRadioCBC2;
    private javax.swing.JRadioButton jRadioCBCBlowfish;
    private javax.swing.JRadioButton jRadioECB;
    private javax.swing.JRadioButton jRadioECBBlowfish;
    private javax.swing.JRadioButton jRadioECBRSA;
    private javax.swing.JRadioButton jRadioISO10126;
    private javax.swing.JRadioButton jRadioISOBlowfish;
    private javax.swing.JRadioButton jRadioLZero3;
    private javax.swing.JRadioButton jRadioPKCS1RSA;
    private javax.swing.JRadioButton jRadioPKCS5;
    private javax.swing.JRadioButton jRadioPKCS5Blowfish;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextAreaFileContentBlowfish;
    private javax.swing.JTextArea jTextAreaFileContentDES;
    private javax.swing.JTextArea jTextAreaFileContentRSA;
    private javax.swing.JTextField jTextFilePathBlowfish;
    private javax.swing.JTextField jTextFilePathDES;
    private javax.swing.JTextField jTextFilePathRSA;
    private javax.swing.JTextField jTextIVBlowfish;
    private javax.swing.JTextField jTextIVDES;
    private javax.swing.JTextField jTextKeyBlowfish;
    private javax.swing.JTextField jTextKeyDES;
    private javax.swing.JTextField jTextMD5Blowfish;
    private javax.swing.JTextField jTextMD5DES;
    private javax.swing.JTextField jTextMD5RSA;
    private javax.swing.JTextField jTextRSAD;
    private javax.swing.JTextField jTextRSAE;
    private javax.swing.JTextField jTextRSAN;
    private javax.swing.JTextField jTextRSAPhiN;
    private javax.swing.JTextField jTextRSAp;
    private javax.swing.JTextField jTextRSAq;
    private javax.swing.ButtonGroup modeBlowfishButtonGroup1;
    private javax.swing.ButtonGroup modeButtonGroup;
    private javax.swing.ButtonGroup modeRSAbuttonGroup1;
    private javax.swing.ButtonGroup paddingBlowfishButtonGroup1;
    private javax.swing.ButtonGroup paddingButtonGroup;
    private javax.swing.ButtonGroup paddingRSAButtonGroup1;
    // End of variables declaration//GEN-END:variables
}
